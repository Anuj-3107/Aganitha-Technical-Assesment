Update the installed packages and package cache on your instance.
Command:
sudo yum update -y

Install the most recent Docker Engine package.
Command:
sudo amazon-linux-extras install docker
sudo yum install docker

Start the Docker service.
Command:
sudo service docker start

Add the ec2-user to the docker group so you can execute Docker commands without using sudo.
Command:
sudo usermod -a -G docker ec2-user

Log out and log back in again to pick up the new docker group permissions. You can accomplish this by closing your current SSH terminal window and reconnecting to your instance in a new one. Your new SSH session will have the appropriate docker group permissions.

Verify that the ec2-user can run Docker commands without sudo.
Command:
docker info

Run Postgres Using Docker Compose

Command:
mkdir postgres
cd postgres/

Next, use Docker Compose to download the Postgres image and get the service up and running. Do this by creating a new docker-compose.yml file with an editor of your choice (in this example, we used nano):
Command:
nano docker-compose.yml

Add the following content to the docker-compose file:
Command:
version: ‘3’
service:
  postgres:
  image: ‘postgres: latest’
  ports:
    - “5432:5432” 

Now that you have the yaml configuration file, you can start the postgres service and run the container. Use the docker-compose up command with the -d option to put it into detach mode (allowing you to continue to run commands from the current shell):
Command:
docker-compose up -d

Starting with Postgres Containers
Connect to Postgres in Docker Container
To enter a Postgres container, you need to execute using the container name and enable psql, the command-line interface for Postgres.
Command:
docker exec -it [container_name] psql -U [postgres_user]

Create a database:
Command:
create database [db_name];
create table [table_name] ([field_names] [values])